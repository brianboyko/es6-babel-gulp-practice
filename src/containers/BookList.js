// /containers/BookList.js

// because BookList has to be aware of state, it must be a container. 

import React, { Component } from 'react';
import { connect } from 'react-redux'; // turns this from component to container
import { selectBook } from '../actions/index';
import { bindActionCreators } from 'redux'; // what we use to make sure that the action generated by the action creator flows through all reducers.

class BookList extends Component{
  renderList(){
    return this.props.books.map((book) => (
        <li key={book.title}
            onClick={() => this.props.selectBook(book) } >
          {book.title}
        </li>
      ))
  }

  render(){
    return (
      <ul>
        {this.renderList()}
      </ul> 
     )
  }
}

function mapStateToProps(state){
  // This takes ALL of the state. 
  // Whatever is returned here will show up as props inside of BookList. 
  // i.e. this.props in BookList. 
  return {
    books: state.books
  }
}

// Anything returned from this function will end up as props on the BookList container. 
function mapDispatchToProps(dispatch){
  // Whenever selectBook is called, result should be patched to all of our reducers. 
  // That's what bindActionCreators is doing here. 
  return bindActionCreators({ selectBook: selectBook }, dispatch); 
  // so "selectBook" can be called as "this.props.selectBook" to call our action creator. 
}

// Promote BookList from a component to a container 
// - it needs to know about this new dispatch method, selectBook. 
// Make it available as a prop. 
export default connect(mapStateToProps, mapDispatchToProps)(BookList); 