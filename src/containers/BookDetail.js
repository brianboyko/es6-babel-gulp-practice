// /containers/BookList.js

// because BookList has to be aware of state, it must be a container. 

import React, { Component } from 'react';
import { connect } from 'react-redux'; // turns this from component to container
import { addPage } from '../actions/index';
import { bindActionCreators } from 'redux'; // what we use to make sure that the action generated by the action creator flows through all reducers.

class BookDetail extends Component{
  addAPage(){
    this.props.addPage(this.props.book);
    this.forceUpdate(); 
  }
  render(){
    if (!this.props.book){
      return (<div />)
    }
    return (
      <div onClick={() => this.addAPage()}>
        <h3>Details for:</h3>
        <div>Title: {this.props.book.title}</div>
        <div>Pages: {this.props.book.pages}</div>
      </div>
     )
  }
}

function mapStateToProps(state){
  // This takes ALL of the state. 
  // Whatever is returned here will show up as props inside of BookList. 
  // i.e. this.props in BookList. 
  return {
    book: state.activeBook
  }
}

// Anything returned from this function will end up as props on the BookList container. 
function mapDispatchToProps(dispatch){
  // Whenever selectBook is called, result should be patched to all of our reducers. 
  // That's what bindActionCreators is doing here. 
  return bindActionCreators({ addPage: addPage }, dispatch); 
  // so "selectBook" can be called as "this.props.selectBook" to call our action creator. 
}

// // Promote BookList from a component to a container 
// // - it needs to know about this new dispatch method, selectBook. 
// // Make it available as a prop. 
export default connect(mapStateToProps, mapDispatchToProps)(BookDetail); 